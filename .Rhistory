else{bpoints[[n]]$x=points[[n]]$x*ascal[1]*abs(arrows[[n]]$est)*as+arrows[[n]]$x[4]+ax;bpoints[[n]]$y=points[[n]]$y*ascal[2]*abs(arrows[[n]]$est)*as+arrows[[n]]$y[4]+ay
points[[n]]$x=points[[n]]$x*ascal[1]*abs(arrows[[n]]$est)+arrows[[n]]$x[4]+ax;points[[n]]$y=points[[n]]$y*ascal[2]*abs(arrows[[n]]$est)+arrows[[n]]$y[4]+ay}
space=parm$scal*abs(arrows[[n]]$est)/10*0                                                      #space at end of path
arrows[[n]]$midx=(arrows[[n]]$x[4]+arrows[[n]]$x[1])/2+arrow[[n]]$txtnudge[1]-space          #find midpoints of paths
arrows[[n]]$midy=(arrows[[n]]$y[4]+arrows[[n]]$y[1])/2+arrow[[n]]$txtnudge[2]+space
}
pal=c("#CC0C00FF","#5C88DAFF")                                                                 #default palette
s=ggplot()                                                                                     #new ggplot object
nl=ifelse(rep(is.null(fit),length(names(arrows))),names(arrows),e$name[order(-abs(e$est))])    #for each path:
for(n in nl){
if(parm$outline){s=s+geom_bezier(data=as.data.frame(arrows[[n]]),                            #add white beziers
aes(x=x,y=y),
size=parm$scal*abs(arrows[[n]]$est)*c(1.5,1)[(arrows[[n]]$p)+1],
color='white',
linetype=c('solid','dotted')[(arrows[[n]]$p)+1])}
s=s+geom_bezier(data=as.data.frame(arrows[[n]]),                                             #add main beziers
aes(x=x,y=y,color=as.factor(sign(est))),
size=parm$scal*abs(arrows[[n]]$est),
linetype=c('solid','dotted')[(arrows[[n]]$p)+1])
if(length(points[[n]]$x)<4){                                                                 #bullets
s=s+geom_point(data=as.data.frame(points[[n]]),aes(x=x,y=y,color=as.character(-1)),size=1.5*parm$scal*abs(arrows[[n]]$est))}
else{                                                                                        #arrows
s=s+geom_polygon(data=as.data.frame(points[[n]]),aes(x=x,y=y,fill=as.character(1),color=as.character(1)),size=1)}
s=s+geom_text(data=as.data.frame(arrows[[n]]),                                               #labels
aes(x=midx,y=midy,label=lab),
color='black',
size=parm$size)}
#add boxes and text
s=s+geom_rect(data=box,aes(xmin=x-w/2,xmax=x+w/2,ymin=y+h/2,ymax=y-h/2),fill='white', colour = "black")+
geom_text(data=box,aes(x=x,y=y,label=n),size=parm$size,color='black')
s=s+guides(fill=F,color=F)+                                                                    #remove key, axes
theme_void()
if(is.null(fit)){s=s+scale_color_manual(values='black')+                                       #black for metamodels
scale_fill_manual(values='black')}
else{s=s+scale_color_manual(values=c('-1'=pal[1],'1'=pal[2]))+                                 #pal for fit models
scale_fill_manual(values=c('-1'=pal[1],'1'=pal[2]))}
return(s)}
eclair(format,fit)
eclair(format,fit,scal=2)
e=eclair(format,fit,scal=2)
png('example.png',1000,1000,type='cairo');e;dev.off();system2('open','example.png')
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
e=eclair(format,fit,scal=2,size=8)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
e=eclair(format,fit,scal=2,size=5)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
e=eclair(format,fit,scal=2,size=50)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
e=eclair(format,fit,scal=2,size=5)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
format='plant [pos=c(0,5),lab="plant\\nbiomass"]
herb [pos=c(5,2.5),lab="herbivore\\nbiomass"]
omni [pos=c(10,7.5),lab="omnivore\\nbiomass"]
pred [pos=c(10,2.5),lab="carnivore\\nbiomass"]
plant>herb [nudge=c(0,0,0,0),txt="1"]
plant>omni [nudge=c(0,0,0,.33),txt="2"]
herb>omni [nudge=c(0,0,0,-.33),txt="3"]
herb>pred [txtnudge=c(0,0),txt="4"]
omni>pred [txtnudge=c(0,0),txt="4"]'
e=eclair(format,fit,scal=2,size=5)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
#### Creates ggplot object of specified path model ####
#### accepts model string, Lavaan or Jags model output, scale factor for paths/bullets/text, scale factor for arrows, alpha value to compare p value, toggels for outlines, text, filter to rename lavaan output to match model string ####
eclair=function(model,fit=NULL,...){
default=list('pos'=c(0,0),                                                                    #Default values for vars missing from model string
'size'=c(1,1),
'lab'='',
'nudge'=c(0,0,0,0),
'txtnudge'=c(0,0),
'txt'='')
parm=list(...)                                                                                #default values for vars missing from function call
if(is.null(parm$scal))   {parm$scal=5}
if(is.null(parm$ascal))  {parm$ascal=c(1,1)*parm$scal}
else{parm$ascal=parm$ascal*parm$scal*c(1,1)}
if(is.null(parm$size))   {parm$size=10}
if(is.null(parm$alpha))  {parm$alpha=10}
if(is.null(parm$outline)){parm$outline=T}
if(is.null(parm$mask))   {parm$mask=NULL}
if(is.null(parm$txtoff)) {parm$txtoff=F}
if(is.null(parm$autonudge)){parm$autonudge=T}
if(!is.null(fit)){                                                                             #if model in call:
e=tryCatch(est_choice(fit),error=function(e){
cat("Could not extract parameters from model\n")})                                         #get parameter estimates
e=e[e$op=='~',]
e$name=paste(e$rhs,'>',e$lhs,sep='')                                                         #convert them to match model string format
e$pvalue=e$pvalue>parm$alpha                                                                 #add p value
e$nest=ceiling(abs(e$est/max(e$est)*parm$scal))*sign(e$est)                                  #add modified estimates
if(!is.null(parm$mask)){for(n in names(parm$mask)){e$name=gsub(n,parm$mask[n],e$name)}}}     #rename vars
lines=str_split(model,'\\]\n')[[1]]                                                            #split model string into lines
lines=gsub('\\]$',')',gsub('\\[','list(',lines))                                               #convert to list format
lines[-length(lines)]=paste(lines[-length(lines)],')',sep='')
info=list();arrow=list()
for(l in 1:length(lines)){                                                                     #evaluate lines as lists, extract data into info list for boxes and arrow list for paths
if('>'%in%strsplit(lines[l],'')[[1]]){arrow[[str_match(lines[l],'^(.+) .+$')[,2]]]=eval(parse(text=str_match(lines[l],'list\\(.+\\)$')))}
else{info[[str_match(lines[l],'^(.+) list')[,2]]]=eval(parse(text=str_match(lines[l],'list.+')))}}
for(i in names(info)){                                                                         #fill in default values for info and arrow if missing from names
for(d in names(default)){
if(!d%in%names(info[[i]])){info[[i]][[d]]=default[[d]]}}}
for(i in names(arrow)){
for(d in names(default)){
if(!d%in%names(arrow[[i]])){arrow[[i]][[d]]=default[[d]]}}}
box=setNames(as.data.frame(matrix(ncol=5)),c('n','x','y','w','h'))                             #create dataframe of boxes for plot
for(n in names(info)){                                                                         #populate with data from info
box=rbind(box,data.frame('n'=info[[n]]$lab,'x'=info[[n]]$pos[1],'y'=info[[n]]$pos[2],'w'=info[[n]]$size[1],'h'=info[[n]]$size[2]))}
box=na.omit(box)
arrows=list();points=list();bpoints=list()                                                     #create lists for data about arrow paths, arrow heads
for(n in names(arrow)){                                                                        #for each path:
if(is.null(fit)){row=data.frame('est'=1,'nest'=1,'pvalue'=0>parm$alpha)}                     #default values
else{row=e[e$name==n,]}
ns=str_split(n,'>')[[1]]                                                                     #split path into source, destination
v1=info[[ns[1]]];v2=info[[ns[2]]]                                                            #info for source and destination
sizes=c(v1$size,v2$size)                                                                     #extract box sizes
v3=(v2$pos-v1$pos)                                                                           #vector between box centers
ins=c()
for(i in 1:4){                                                                               #for a vector from the center of the source box to each corner of the source box, find if vector towards destination between two corners
corners=list(c(-1,1)*v1$size,
c(1,1)*v1$size,
c(1,-1)*v1$size,
c(-1,-1)*v1$size,
c(-1,1)*v1$size)
ins=c(ins,inside(corners[[i]],corners[[i+1]],v3))
}
side=match(T,ins)                                                                            #find side based on which angles vector to destination is between
ascal=list(c(parm$ascal),c(parm$ascal[2],parm$ascal[1]))[[(side%in%c(2,4))+1]]               #rotate arrow scale based on side
if(sign(row$est)>0){points[[n]]=list(data.frame('x'=c(0,.5,0,-.5),'y'=c(0,2,1.5,2)*.75),     #select arrowhead based on side
data.frame('x'=c(0,2,1.5,2)*.75,'y'=c(0,.5,0,-.5)),
data.frame('x'=c(0,.5,0,-.5),'y'=((2-c(0,2,1.5,2))-2)*.75),
data.frame('x'=((2-c(0,2,1.5,2))-2)*.75,'y'=c(0,.5,0,-.5)))[[c(3,4,1,2)[side]]]/18
ss=max(abs(c(points[[n]]$x[3],points[[n]]$y[3])))*parm$scal*abs(row$nest)                    #calculate distance factor based on size of arrow & path
v2$size=v2$size*1.125+ss*2}                                                                  #rescale size to add border
else{points[[n]]='point';ss=1.5*parm$scal*abs(row$nest)/2/20;v2$size=v2$size*1.25+ss}        #bullets if est negative
#select control points for bezier and nudge based on data
nu=arrow[[n]]$nudge*list(c(sizes[1],1,sizes[3],1),c(1,sizes[2],1,sizes[4]))[[(side%in%c(2,4))+1]]
arrows[[n]]=list(list('x'=c(v1$pos[1],v1$pos[1],v2$pos[1],v2$pos[1])+c(nu[1],nu[1],nu[3],nu[3]),
'y'=c(v1$pos[2],v2$pos[2],v1$pos[2],v2$pos[2])+c(0,nu[2],nu[4],0)),
list('x'=c(v1$pos[1],v2$pos[1],v1$pos[1],v2$pos[1])+c(0,nu[1],nu[3],0),
'y'=c(v1$pos[2],v1$pos[2],v2$pos[2],v2$pos[2])+c(nu[2],nu[2],nu[4],nu[4])))[[(side%in%c(2,4))+1]]
arrows[[n]]$x=                                                                               #adjust paths to point to edge of box, not center
list(arrows[[n]]$x+c(0,0,0,0),
arrows[[n]]$x+c(v1$size[1]/2,-v2$size[1]/2,v1$size[1]/2,-v2$size[1]/2),
arrows[[n]]$x+c(0,0,0,0),
arrows[[n]]$x+c(-v1$size[1]/2,v2$size[1]/2,-v1$size[1]/2,v2$size[1]/2))[[side]]
arrows[[n]]$y=
list(arrows[[n]]$y+c(v1$size[2]/2,-v2$size[2]/2,v1$size[2]/2,-v2$size[2]/2),
arrows[[n]]$y+c(0,0,0,0),
arrows[[n]]$y+c(-v1$size[2]/2,v2$size[2]/2,-v1$size[2]/2,v2$size[2]/2),
arrows[[n]]$y+c(0,0,0,0))[[side]]
arrows[[n]]$est=row$nest;arrows[[n]]$p=row$pvalue;                                           #extract fit measures
if(!parm$txtoff){arrows[[n]]$lab=arrow[[n]]$txt}                                             #extract labels
else{arrows[[n]]$lab=round(row$est,2)}
as=1.1;                                                                                      #scale values for labels, paths
ax=c(0,ss,0,-ss)[side];ay=c(ss,0,-ss,0)[side]
#properly scale arrows
if(length(points[[n]])==1){points[[n]]=list('x'=arrows[[n]]$x[4]+ax*0,'y'=arrows[[n]]$y[4]+ay*0)}
else{bpoints[[n]]$x=points[[n]]$x*ascal[1]*abs(arrows[[n]]$est)*as+arrows[[n]]$x[4]+ax;bpoints[[n]]$y=points[[n]]$y*ascal[2]*abs(arrows[[n]]$est)*as+arrows[[n]]$y[4]+ay
points[[n]]$x=points[[n]]$x*ascal[1]*abs(arrows[[n]]$est)+arrows[[n]]$x[4]+ax;points[[n]]$y=points[[n]]$y*ascal[2]*abs(arrows[[n]]$est)+arrows[[n]]$y[4]+ay}
space=ifelse(parm$autonudge,parm$scal*abs(arrows[[n]]$est)/10,0)                             #space at end of path
arrows[[n]]$midx=(arrows[[n]]$x[4]+arrows[[n]]$x[1])/2+arrow[[n]]$txtnudge[1]-space          #find midpoints of paths
arrows[[n]]$midy=(arrows[[n]]$y[4]+arrows[[n]]$y[1])/2+arrow[[n]]$txtnudge[2]+space
}
pal=c("#CC0C00FF","#5C88DAFF")                                                                 #default palette
s=ggplot()                                                                                     #new ggplot object
nl=ifelse(rep(is.null(fit),length(names(arrows))),names(arrows),e$name[order(-abs(e$est))])    #for each path:
for(n in nl){
if(parm$outline){s=s+geom_bezier(data=as.data.frame(arrows[[n]]),                            #add white beziers
aes(x=x,y=y),
size=parm$scal*abs(arrows[[n]]$est)*c(1.5,1)[(arrows[[n]]$p)+1],
color='white',
linetype=c('solid','dotted')[(arrows[[n]]$p)+1])}
s=s+geom_bezier(data=as.data.frame(arrows[[n]]),                                             #add main beziers
aes(x=x,y=y,color=as.factor(sign(est))),
size=parm$scal*abs(arrows[[n]]$est),
linetype=c('solid','dotted')[(arrows[[n]]$p)+1])
if(length(points[[n]]$x)<4){                                                                 #bullets
s=s+geom_point(data=as.data.frame(points[[n]]),aes(x=x,y=y,color=as.character(-1)),size=1.5*parm$scal*abs(arrows[[n]]$est))}
else{                                                                                        #arrows
s=s+geom_polygon(data=as.data.frame(points[[n]]),aes(x=x,y=y,fill=as.character(1),color=as.character(1)),size=1)}
s=s+geom_text(data=as.data.frame(arrows[[n]]),                                               #labels
aes(x=midx,y=midy,label=lab),
color='black',
size=parm$size)}
#add boxes and text
s=s+geom_rect(data=box,aes(xmin=x-w/2,xmax=x+w/2,ymin=y+h/2,ymax=y-h/2),fill='white', colour = "black")+
geom_text(data=box,aes(x=x,y=y,label=n),size=parm$size,color='black')
s=s+guides(fill=F,color=F)+                                                                    #remove key, axes
theme_void()
if(is.null(fit)){s=s+scale_color_manual(values='black')+                                       #black for metamodels
scale_fill_manual(values='black')}
else{s=s+scale_color_manual(values=c('-1'=pal[1],'1'=pal[2]))+                                 #pal for fit models
scale_fill_manual(values=c('-1'=pal[1],'1'=pal[2]))}
return(s)}
e=eclair(format,fit,scal=2,size=5)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
format='plant [pos=c(0,5),size=c(1,2),lab="plant\\nbiomass"]
herb [pos=c(5,2.5),lab="herbivore\\nbiomass"]
omni [pos=c(10,7.5),lab="omnivore\\nbiomass"]
pred [pos=c(10,2.5),lab="carnivore\\nbiomass"]
plant>herb [nudge=c(0,0,0,0),txt="1"]
plant>omni [nudge=c(0,0,0,.33),txt="2"]
herb>omni [nudge=c(0,0,0,-.33),txt="3"]
herb>pred [txtnudge=c(0,0),txt="4"]
omni>pred [txtnudge=c(0,0),txt="4"]'
e=eclair(format,fit,scal=2,size=5)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
format='plant [pos=c(0,5),size=c(2,2),lab="plant\\nbiomass"]
herb [pos=c(5,2.5),lab="herbivore\\nbiomass"]
omni [pos=c(10,7.5),lab="omnivore\\nbiomass"]
pred [pos=c(10,2.5),lab="carnivore\\nbiomass"]
plant>herb [nudge=c(0,0,0,0),txt="1"]
plant>omni [nudge=c(0,0,0,.33),txt="2"]
herb>omni [nudge=c(0,0,0,-.33),txt="3"]
herb>pred [txtnudge=c(0,0),txt="4"]
omni>pred [txtnudge=c(0,0),txt="4"]'
e=eclair(format,fit,scal=2,size=5)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
format='plant [pos=c(0,5),size=c(2,2),lab="Plant\\nbiomass"]
herb [pos=c(5,2.5),lab="Herbivore\\nbiomass"]
omni [pos=c(10,7.5),lab="Omnivore\\nbiomass"]
pred [pos=c(10,2.5),lab="Carnivore\\nbiomass"]
plant>herb [nudge=c(0,0,0,0),txtnudge=c(0,0),txt="1"]
plant>omni [nudge=c(0,0,0,.33),txt="2"]
herb>omni [nudge=c(0,0,0,-.33),txt="3"]
herb>pred [txt="4"]
omni>pred [txt="5"]'
e=eclair(format,fit,scal=2,size=5)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
format='plant [pos=c(0,5),size=c(1,5),lab="Plant\\nbiomass"]
herb [pos=c(5,2.5),lab="Herbivore\\nbiomass"]
omni [pos=c(10,7.5),lab="Omnivore\\nbiomass"]
pred [pos=c(10,2.5),lab="Carnivore\\nbiomass"]
plant>herb [nudge=c(0,0,0,0),txtnudge=c(0,0),txt="1"]
plant>omni [nudge=c(0,0,0,.33),txt="2"]
herb>omni [nudge=c(0,0,0,-.33),txt="3"]
herb>pred [txt="4"]
omni>pred [txt="5"]'
e=eclair(format,fit,scal=2,size=5)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
format='plant [pos=c(0,5),size=c(1,6),lab="Plant\\nbiomass"]
herb [pos=c(5,2.5),lab="Herbivore\\nbiomass"]
omni [pos=c(10,7.5),lab="Omnivore\\nbiomass"]
pred [pos=c(10,2.5),lab="Carnivore\\nbiomass"]
plant>herb [nudge=c(0,0,0,0),txtnudge=c(0,0),txt="1"]
plant>omni [nudge=c(0,0,0,.33),txt="2"]
herb>omni [nudge=c(0,0,0,-.33),txt="3"]
herb>pred [txt="4"]
omni>pred [txt="5"]'
e=eclair(format,fit,scal=2,size=5)
png('example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
e=eclair(format,scal=2,size=5)
png('meta_example.png',1000,500,type='cairo');e;dev.off();system2('open','example.png')
e=eclair(format,scal=2,size=5)
e=eclair(format,scal=2,size=5)
png('meta_example.png',1000,500,type='cairo');e;dev.off();system2('open','meta_example.png')
e=eclair(format,fit,scal=2,size=5,txtoff=T)
png('fitted_example.png',1000,500,type='cairo');e;dev.off();system2('open','fitted_example.png')
m=c('plant'='a','herb'='b','omni'='c','pred'='d')
e=eclair(format2,fit,scal=2,size=5,txtoff=T,mask=m)
format2='a [pos=c(0,5),size=c(1,6),lab="Plant\\nbiomass"]
b [pos=c(5,2.5),lab="Herbivore\\nbiomass"]
c [pos=c(10,7.5),lab="Omnivore\\nbiomass"]
d [pos=c(10,2.5),lab="Carnivore\\nbiomass"]
a>b [nudge=c(0,0,0,0),txtnudge=c(0,0),txt="1"]
a>c [nudge=c(0,0,0,.33),txt="2"]
b>c [nudge=c(0,0,0,-.33),txt="3"]
b>d [txt="4"]
c>d [txt="5"]'
e=eclair(format2,fit,scal=2,size=5,txtoff=T,mask=m)
png('mask_example.png',1000,500,type='cairo');e;dev.off();system2('open','mask_example.png')
e=eclair(format2,fit,scal=2,size=5,mask=m)
png('mask_example.png',1000,500,type='cairo');e;dev.off();system2('open','mask_example.png')
e=eclair(format,fit,scal=2,size=5,txtoff=T,autonudge=F)
png('fitted_example.png',1000,500,type='cairo');e;dev.off();system2('open','fitted_example.png')
e=eclair(format2,fit,scal=2,size=5,,autonudge=F,mask=m)
png('mask_example.png',1000,500,type='cairo');e;dev.off();system2('open','mask_example.png')
e=eclair(format2,fit,scal=2,size=5,autonudge=F,mask=m)
png('mask_example.png',1000,500,type='cairo');e;dev.off();system2('open','mask_example.png')
#### Creates ggplot object of specified path model ####
#### accepts model string, Lavaan or Jags model output, scale factor for paths/bullets/text, scale factor for arrows, alpha value to compare p value, toggels for outlines, text, filter to rename lavaan output to match model string ####
path=function(model,fit=NULL,...){
default=list('pos'=c(0,0),                                                                    #Default values for vars missing from model string
'size'=c(1,1),
'lab'='',
'nudge'=c(0,0,0,0),
'txtnudge'=c(0,0),
'txt'='')
parm=list(...)                                                                                #default values for vars missing from function call
if(is.null(parm$scal))   {parm$scal=5}
if(is.null(parm$ascal))  {parm$ascal=c(1,1)*parm$scal}
else{parm$ascal=parm$ascal*parm$scal*c(1,1)}
if(is.null(parm$size))   {parm$size=10}
if(is.null(parm$alpha))  {parm$alpha=10}
if(is.null(parm$outline)){parm$outline=T}
if(is.null(parm$mask))   {parm$mask=NULL}
if(is.null(parm$txtoff)) {parm$txtoff=F}
if(is.null(parm$autonudge)){parm$autonudge=T}
if(!is.null(fit)){                                                                             #if model in call:
e=tryCatch(est_choice(fit),error=function(e){
cat("Could not extract parameters from model\n")})                                         #get parameter estimates
e=e[e$op=='~',]
e$name=paste(e$rhs,'>',e$lhs,sep='')                                                         #convert them to match model string format
e$pvalue=e$pvalue>parm$alpha                                                                 #add p value
e$nest=ceiling(abs(e$est/max(e$est)*parm$scal))*sign(e$est)                                  #add modified estimates
if(!is.null(parm$mask)){for(n in names(parm$mask)){e$name=gsub(n,parm$mask[n],e$name)}}}     #rename vars
lines=str_split(model,'\\]\n')[[1]]                                                            #split model string into lines
lines=gsub('\\]$',')',gsub('\\[','list(',lines))                                               #convert to list format
lines[-length(lines)]=paste(lines[-length(lines)],')',sep='')
info=list();arrow=list()
for(l in 1:length(lines)){                                                                     #evaluate lines as lists, extract data into info list for boxes and arrow list for paths
if('>'%in%strsplit(lines[l],'')[[1]]){arrow[[str_match(lines[l],'^(.+) .+$')[,2]]]=eval(parse(text=str_match(lines[l],'list\\(.+\\)$')))}
else{info[[str_match(lines[l],'^(.+) list')[,2]]]=eval(parse(text=str_match(lines[l],'list.+')))}}
for(i in names(info)){                                                                         #fill in default values for info and arrow if missing from names
for(d in names(default)){
if(!d%in%names(info[[i]])){info[[i]][[d]]=default[[d]]}}}
for(i in names(arrow)){
for(d in names(default)){
if(!d%in%names(arrow[[i]])){arrow[[i]][[d]]=default[[d]]}}}
box=setNames(as.data.frame(matrix(ncol=5)),c('n','x','y','w','h'))                             #create dataframe of boxes for plot
for(n in names(info)){                                                                         #populate with data from info
box=rbind(box,data.frame('n'=info[[n]]$lab,'x'=info[[n]]$pos[1],'y'=info[[n]]$pos[2],'w'=info[[n]]$size[1],'h'=info[[n]]$size[2]))}
box=na.omit(box)
arrows=list();points=list();bpoints=list()                                                     #create lists for data about arrow paths, arrow heads
for(n in names(arrow)){                                                                        #for each path:
if(is.null(fit)){row=data.frame('est'=1,'nest'=1,'pvalue'=0>parm$alpha)}                     #default values
else{row=e[e$name==n,]}
ns=str_split(n,'>')[[1]]                                                                     #split path into source, destination
v1=info[[ns[1]]];v2=info[[ns[2]]]                                                            #info for source and destination
sizes=c(v1$size,v2$size)                                                                     #extract box sizes
v3=(v2$pos-v1$pos)                                                                           #vector between box centers
ins=c()
for(i in 1:4){                                                                               #for a vector from the center of the source box to each corner of the source box, find if vector towards destination between two corners
corners=list(c(-1,1)*v1$size,
c(1,1)*v1$size,
c(1,-1)*v1$size,
c(-1,-1)*v1$size,
c(-1,1)*v1$size)
ins=c(ins,inside(corners[[i]],corners[[i+1]],v3))
}
side=match(T,ins)                                                                            #find side based on which angles vector to destination is between
ascal=list(c(parm$ascal),c(parm$ascal[2],parm$ascal[1]))[[(side%in%c(2,4))+1]]               #rotate arrow scale based on side
if(sign(row$est)>0){points[[n]]=list(data.frame('x'=c(0,.5,0,-.5),'y'=c(0,2,1.5,2)*.75),     #select arrowhead based on side
data.frame('x'=c(0,2,1.5,2)*.75,'y'=c(0,.5,0,-.5)),
data.frame('x'=c(0,.5,0,-.5),'y'=((2-c(0,2,1.5,2))-2)*.75),
data.frame('x'=((2-c(0,2,1.5,2))-2)*.75,'y'=c(0,.5,0,-.5)))[[c(3,4,1,2)[side]]]/18
ss=max(abs(c(points[[n]]$x[3],points[[n]]$y[3])))*parm$scal*abs(row$nest)                    #calculate distance factor based on size of arrow & path
v2$size=v2$size*1.125+ss*2}                                                                  #rescale size to add border
else{points[[n]]='point';ss=1.5*parm$scal*abs(row$nest)/2/20;v2$size=v2$size*1.25+ss}        #bullets if est negative
#select control points for bezier and nudge based on data
nu=arrow[[n]]$nudge*list(c(sizes[1],1,sizes[3],1),c(1,sizes[2],1,sizes[4]))[[(side%in%c(2,4))+1]]
arrows[[n]]=list(list('x'=c(v1$pos[1],v1$pos[1],v2$pos[1],v2$pos[1])+c(nu[1],nu[1],nu[3],nu[3]),
'y'=c(v1$pos[2],v2$pos[2],v1$pos[2],v2$pos[2])+c(0,nu[2],nu[4],0)),
list('x'=c(v1$pos[1],v2$pos[1],v1$pos[1],v2$pos[1])+c(0,nu[1],nu[3],0),
'y'=c(v1$pos[2],v1$pos[2],v2$pos[2],v2$pos[2])+c(nu[2],nu[2],nu[4],nu[4])))[[(side%in%c(2,4))+1]]
arrows[[n]]$x=                                                                               #adjust paths to point to edge of box, not center
list(arrows[[n]]$x+c(0,0,0,0),
arrows[[n]]$x+c(v1$size[1]/2,-v2$size[1]/2,v1$size[1]/2,-v2$size[1]/2),
arrows[[n]]$x+c(0,0,0,0),
arrows[[n]]$x+c(-v1$size[1]/2,v2$size[1]/2,-v1$size[1]/2,v2$size[1]/2))[[side]]
arrows[[n]]$y=
list(arrows[[n]]$y+c(v1$size[2]/2,-v2$size[2]/2,v1$size[2]/2,-v2$size[2]/2),
arrows[[n]]$y+c(0,0,0,0),
arrows[[n]]$y+c(-v1$size[2]/2,v2$size[2]/2,-v1$size[2]/2,v2$size[2]/2),
arrows[[n]]$y+c(0,0,0,0))[[side]]
arrows[[n]]$est=row$nest;arrows[[n]]$p=row$pvalue;                                           #extract fit measures
if(!parm$txtoff){arrows[[n]]$lab=arrow[[n]]$txt}                                             #extract labels
else{arrows[[n]]$lab=round(row$est,2)}
as=1.1;                                                                                      #scale values for labels, paths
ax=c(0,ss,0,-ss)[side];ay=c(ss,0,-ss,0)[side]
#properly scale arrows
if(length(points[[n]])==1){points[[n]]=list('x'=arrows[[n]]$x[4]+ax*0,'y'=arrows[[n]]$y[4]+ay*0)}
else{bpoints[[n]]$x=points[[n]]$x*ascal[1]*abs(arrows[[n]]$est)*as+arrows[[n]]$x[4]+ax;bpoints[[n]]$y=points[[n]]$y*ascal[2]*abs(arrows[[n]]$est)*as+arrows[[n]]$y[4]+ay
points[[n]]$x=points[[n]]$x*ascal[1]*abs(arrows[[n]]$est)+arrows[[n]]$x[4]+ax;points[[n]]$y=points[[n]]$y*ascal[2]*abs(arrows[[n]]$est)+arrows[[n]]$y[4]+ay}
space=ifelse(parm$autonudge,parm$scal*abs(arrows[[n]]$est)/10,0)                             #space at end of path
arrows[[n]]$midx=(arrows[[n]]$x[4]+arrows[[n]]$x[1])/2+arrow[[n]]$txtnudge[1]-space          #find midpoints of paths
arrows[[n]]$midy=(arrows[[n]]$y[4]+arrows[[n]]$y[1])/2+arrow[[n]]$txtnudge[2]+space
}
pal=c("#CC0C00FF","#5C88DAFF")                                                                 #default palette
s=ggplot()                                                                                     #new ggplot object
nl=ifelse(rep(is.null(fit),length(names(arrows))),names(arrows),e$name[order(-abs(e$est))])    #for each path:
for(n in nl){
if(parm$outline){s=s+geom_bezier(data=as.data.frame(arrows[[n]]),                            #add white beziers
aes(x=x,y=y),
size=parm$scal*abs(arrows[[n]]$est)*c(1.5,1)[(arrows[[n]]$p)+1],
color='white',
linetype=c('solid','dotted')[(arrows[[n]]$p)+1])}
s=s+geom_bezier(data=as.data.frame(arrows[[n]]),                                             #add main beziers
aes(x=x,y=y,color=as.factor(sign(est))),
size=parm$scal*abs(arrows[[n]]$est),
linetype=c('solid','dotted')[(arrows[[n]]$p)+1])
if(length(points[[n]]$x)<4){                                                                 #bullets
s=s+geom_point(data=as.data.frame(points[[n]]),aes(x=x,y=y,color=as.character(-1)),size=1.5*parm$scal*abs(arrows[[n]]$est))}
else{                                                                                        #arrows
s=s+geom_polygon(data=as.data.frame(points[[n]]),aes(x=x,y=y,fill=as.character(1),color=as.character(1)),size=1)}
s=s+geom_text(data=as.data.frame(arrows[[n]]),                                               #labels
aes(x=midx,y=midy,label=lab),
color='black',
size=parm$size)}
#add boxes and text
s=s+geom_rect(data=box,aes(xmin=x-w/2,xmax=x+w/2,ymin=y+h/2,ymax=y-h/2),fill='white', colour = "black")+
geom_text(data=box,aes(x=x,y=y,label=n),size=parm$size,color='black')
s=s+guides(fill=F,color=F)+                                                                    #remove key, axes
theme_void()
if(is.null(fit)){s=s+scale_color_manual(values='black')+                                       #black for metamodels
scale_fill_manual(values='black')}
else{s=s+scale_color_manual(values=c('-1'=pal[1],'1'=pal[2]))+                                 #pal for fit models
scale_fill_manual(values=c('-1'=pal[1],'1'=pal[2]))}
return(s)}
#######################################################################################################
#### sem plots vignette, 2021/5/27 ####
#######################################################################################################
#### load or install required packages ####
load=function(pkgs,miss=c()){
for(i in pkgs){if(!suppressWarnings(require(i,character.only=T,quietly=T))){miss=c(miss,i)}}
if(length(miss)>0){
if(readline(prompt=paste('install packages: ',paste(miss,collapse=', '),'? (y/n): ',sep=''))=='y'){
install.packages(miss);load(miss)}}}
load(c('ggplot2','ggdist','ggforce','stringr','lavaan','lavaanPlot'))
#### install plotting functions from github ####
devtools::source_url("https://github.com/AriGrele/sem_plot/blob/master/sem.R?raw=TRUE")
#### generate example data ####
data=data.frame('plant'=rnorm(500,10,1))
data$herb=data$plant/10+rnorm(500,0,.1)
data$omni=data$herb/10+data$plant/10+rnorm(500,0,.01)
data$pred=data$herb/10-data$omni/2+rnorm(500,0,.01)
plot(data)
#### lavaan sem ####
model='herb~plant
omni~herb+plant
pred~herb+omni'
fit=sem(model,scale(data,center=F))
lavaanPlot(name="example",fit,labels=colnames(data),coefs=T)
#### create path model figures ####
# path() takes formating string, optional Lavaan or Jags model output
# formating string is split into boxes, paths between boxes
# boxes take arguments of position, size, label
# paths take arguments of x/y axis from default position, x/y axis nudges for label position, labels
# default arguments:
#   pos      = c(0,0)
#   size     = c(1,1)
#   lab      = ''
#   nudge    = c(0,0,0,0) # source x, source y, destination x, destination y
#   txtnudge = c(0,0)     # x, y
#   txt      = ''
# missing values are substituted with defaults
format='plant [pos=c(0,5),size=c(1,6),lab="Plant\\nbiomass"]
herb [pos=c(5,2.5),lab="Herbivore\\nbiomass"]
omni [pos=c(10,7.5),lab="Omnivore\\nbiomass"]
pred [pos=c(10,2.5),lab="Carnivore\\nbiomass"]
plant>herb [nudge=c(0,0,0,0),txtnudge=c(0,0),txt="1"]
plant>omni [nudge=c(0,0,0,.33),txt="2"]
herb>omni [nudge=c(0,0,0,-.33),txt="3"]
herb>pred [txt="4"]
omni>pred [txt="5"]'
#### example meta-model ####
# default arguments:
#   model     = no default  # formatting string
#   fit       = NULL        # lavaan or jags model output
#   scal      = 5           # scaling factor for paths
#   ascal     = c(1,1)*scal # scaling factor for arrowheads
#   size      = 10          # scaling factor for text
#   alpha     = 10          # alpha threshold for dotted paths based on p-value for lavaan, pd for jags
#   outline   = TRUE        # white outline around paths when true
#   mask      = null        # mask if names in formatting string don't match names in lavaan or jags output
#   txtoff    = FALSE       # replaces path labels with parameter estimates when true
#   autonudge = TRUE        # nudges path labels off of paths when true
e1=path(format,scal=2,size=5)
png('meta_example.png',1000,500,type='cairo');e1;dev.off();system2('open','meta_example.png')
#### example fitted model ####
e2=path(format,fit,scal=2,size=5,txtoff=T)
png('fitted_example.png',1000,500,type='cairo');e2;dev.off();system2('open','fitted_example.png')
#### possible to define formatting models where variable names don't match the data using a mask ####
format2='a [pos=c(0,5),size=c(1,6),lab="Plant\\nbiomass"]
b [pos=c(5,2.5),lab="Herbivore\\nbiomass"]
c [pos=c(10,7.5),lab="Omnivore\\nbiomass"]
d [pos=c(10,2.5),lab="Carnivore\\nbiomass"]
a>b [nudge=c(0,0,0,0),txtnudge=c(0,0),txt="1"]
a>c [nudge=c(0,0,0,.33),txt="2"]
b>c [nudge=c(0,0,0,-.33),txt="3"]
b>d [txt="4"]
c>d [txt="5"]'
m=c('plant'='a','herb'='b','omni'='c','pred'='d')
e3=path(format2,fit,scal=2,size=5,autonudge=F,mask=m)
png('mask_example.png',1000,500,type='cairo');e3;dev.off();system2('open','mask_example.png')
#### possible to define formatting models where variable names don't match the data using a mask ####
format2='a [pos=c(0,5),size=c(1,6),lab="Plant\\nbiomass"]
b [pos=c(5,2.5),lab="Herbivore\\nbiomass"]
c [pos=c(10,7.5),lab="Omnivore\\nbiomass"]
d [pos=c(10,2.5),lab="Carnivore\\nbiomass"]
a>b [nudge=c(0,0,0,0),txtnudge=c(0,0),txt="1"]
a>c [nudge=c(0,0,0,.33),txt="2"]
b>c [nudge=c(0,0,0,-.33),txt="3"]
b>d [txt="4"]
c>d [txt="5"]'
m=c('plant'='a','herb'='b','omni'='c','pred'='d')
e3=path(format2,fit,scal=2,size=5,autonudge=F,mask=m)
png('mask_example.png',1000,500,type='cairo');e3;dev.off();system2('open','mask_example.png')
format='plant [pos=c(0,5),size=c(1,6),lab="Plant\\nbiomass"]
herb [pos=c(5,2.5),lab="Herbivore\\nbiomass"]
omni [pos=c(10,7.5),lab="Omnivore\\nbiomass"]
pred [pos=c(10,2.5),lab="Carnivore\\nbiomass"]
plant>herb [nudge=c(0,0,0,0),txtnudge=c(0,0),txt="1"]
plant>omni [nudge=c(0,0,0,.33),txt="2"]
herb>omni [nudge=c(0,0,0,-.33),txt="3"]
herb>pred [txt="4"]
omni>pred [txt="5"]'
e1=path(format,scal=2,size=5)
png('meta_example.png',1000,500,type='cairo');e1;dev.off();system2('open','meta_example.png')
e1=path(format,scal=5,size=5)
png('meta_example.png',1000,500,type='cairo');e1;dev.off();system2('open','meta_example.png')
e1=path(format,scal=4,size=5)
png('meta_example.png',1000,500,type='cairo');e1;dev.off();system2('open','meta_example.png')
e1=path(format,scal=3,size=5)
png('meta_example.png',1000,500,type='cairo');e1;dev.off();system2('open','meta_example.png')
