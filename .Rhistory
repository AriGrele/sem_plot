theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
#######################################################################################################
#### these functions and their outputs may change dramatically in the future ####
#### merge parameter estimates from two models ####
(merged = semmerge(fit,sem('herb~plant\npred~plant',scale(data,center=F))))
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=T)
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=F)
sembars(merged,s = 10,flip=T,group='name')
sembars(merged,s = 10,flip=F,group='name')
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
if(is.null(e$name)){e$name=paste(e$rhs,e$lhs)}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
if(!flip){e$groups=factor(e$groups,levels=rev(levels(e$groups)))}
g=ggplot(e,aes_string(x=group))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(.~name)}
}
else{
g=ggplot(e,aes(x=paste(rhs,lhs)))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=F)
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=T)
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
e$name=paste(rhs,lhs)
if(!flip){e$groups=factor(e$name,levels=rev(levels(e$name)))}
if(is.null(e$name)){e$name=paste(e$rhs,e$lhs)}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
g=ggplot(e,aes_string(x=group))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(.~name)}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=T)
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
e$name=paste(e$rhs,e$lhs)
if(!flip){e$groups=factor(e$name,levels=rev(levels(e$name)))}
if(is.null(e$name)){e$name=paste(e$rhs,e$lhs)}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
g=ggplot(e,aes_string(x=group))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(.~name)}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=T)
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=F)
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
e$name=paste(e$rhs,e$lhs)
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(is.null(e$name)){e$name=paste(e$rhs,e$lhs)}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
g=ggplot(e,aes_string(x=group))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(.~name)}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=F)
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
e$name=as.factor(paste(e$rhs,e$lhs))
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(is.null(e$name)){e$name=paste(e$rhs,e$lhs)}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
g=ggplot(e,aes_string(x=group))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(.~name)}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=F)
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=T)
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
e$name=as.factor(paste(e$rhs,e$lhs))
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(is.null(e$name)){e$name=paste(e$rhs,e$lhs)}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
e$name=e[group]
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(.~name)}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=T)
sembars(merged,s = 10,flip=F,group='name')
sembars(merged,s = 10,flip=T,group='name')
e
merged
sembars(merged,s = 10,flip=T)
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
e$name=as.factor(paste(e$rhs,e$lhs))
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(is.null(e$name)){e$name=paste(e$rhs,e$lhs)}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
e$name=e[,group]
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(.~name)}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
sembars(merged,s = 10,flip=T)
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
e$name=as.factor(paste(e$rhs,e$lhs))
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(is.null(e$name)){e$name=paste(e$rhs,e$lhs)}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
e$name=as.factor(e[,group])
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(.~name)}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
sembars(merged,s = 10,flip=T)
merged
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
if(is.null(e$name)){e$name=as.factor(paste(e$rhs,e$lhs))}
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
g=ggplot(e,aes_string(x=group))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(.~name)}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
sembars(merged,s = 10,flip=T)
sembars(merged,s = 10,flip=T,groups='name')
sembars(merged,s = 10,flip=F,groups='name')
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
if(is.null(e$name)){e$name=as.factor(paste(e$rhs,e$lhs))}
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
g=ggplot(e,aes_string(x=group))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(.~name)}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
sembars(merged,s = 10,flip=F,groups='name')
sembars(merged,s = 10,flip=T,groups='name')
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=T)
#### plot parameter estimates and CIs ####
sembars(fit,s = 5,flip=F)
sembars(merged,s = 10,flip=T,groups='name')
sembars(merged,s = 10,flip=T,groups='names')
sembars(merged,s = 10,flip=T,group='names')
sembars(merged,s = 10,flip=T,group='name')
sembars(merged,s = 10,flip=T,group='group')
sembars(merged,s = 10,flip=F,group='group')
sembars(merged,s = 10,flip=F,group='asdas')
sembars(merged,s = 10,flip=T,group='asdas')
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
if(is.null(e$name)){e$name=as.factor(paste(e$rhs,e$lhs))}
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
g=ggplot(e,aes_string(x=group))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(reformulate('.',group))}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
sembars(merged,s = 10,flip=T,group='asdas')
sembars(merged,s = 10,flip=F,group='asdas')
#### creates ggplot object of paramter estimates and CIs ####
sembars=function(fit=NULL,s=1,mask=NULL,groups=NULL,flip=F,group='groups'){
if(group!='groups'){group='name';facet='groups'}
else{facet='name'}
if(!is.null(fit)){
e=tryCatch(est_choice(fit),error=function(x){
if(is.data.frame(fit)){return(fit)}
cat("Could not extract parameters from model\n")})
e=e[e$op=='~',]
if(is.null(e$name)){e$name=as.factor(paste(e$rhs,e$lhs))}
if(!flip){e$name=factor(e$name,levels=rev(levels(e$name)))}
if(!is.null(mask)){for(n in names(mask)){e$name=gsub(n,mask[n],e$name)}}
if(!is.null(groups)){for(n in names(groups)){e$group=gsub(n,groups[n],e$group)}}
if('groups' %in% names(e)){
g=ggplot(e,aes_string(x=group))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)+
theme(panel.border = element_rect(fill=NA),
panel.spacing=unit(0,'lines'))+
guides(color=F,fill=F)
if(flip){g=g+facet_grid(reformulate('.',facet))}
else{g=g+facet_grid(reformulate(facet,'.'))}
}
else{
g=ggplot(e,aes(x=name))+
geom_pointinterval(aes(y=est,ymin=ci.lower,ymax=ci.upper),size=s)+
geom_pointinterval(aes(y=est,ymin=ciml,ymax=cimu),size=2*s)+
theme_classic()+
geom_hline(yintercept = 0)}
if(flip){g=g+coord_flip()}
return(g)}
cat("Model needed\n")
return(NULL)}
sembars(merged,s = 10,flip=F,group='asdas')
sembars(merged,s = 10,flip=T,group='asdas')
sembars(merged,s = 10,flip=T,group='name')
sembars(merged,s = 10,flip=T,group='groups')
load=function(pkgs,miss=c()){
for(i in pkgs){if(!suppressWarnings(require(i,character.only=T,quietly=T))){miss=c(miss,i)}}
if(length(miss)>0){
if(readline(prompt=paste('install packages: ',paste(miss,collapse=', '),'? (y/n): ',sep=''))=='y'){
install.packages(miss);load(miss)}}}
load(c('ggplot2','ggdist','ggforce','stringr','lavaan','lavaanPlot'))
load(c('devtools','dplyr','extrafont','ggtext','gt','ggrepel','ggspatial','gridExtra','ggdist','cowplot','rnaturalearth','sf','pals','beepr','reshape2'))
load(c('stringr','coda','jagsui','ggsci','ggforce','readxl','vegan','MuMIn','piecewiseSEM','ecodist','fossil','lme4'))
n
load(c('jagsUI'))
load(c('jagsUI','lavaanPlot'))
